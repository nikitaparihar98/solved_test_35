#include <iostream>
#include <vector>
using namespace std;

bool canReach(vector<vector<int>>& grid, int n, int m) {
    vector<vector<int>> dp(n, vector<int>(m, 0));

    if (grid[0][0] == 1)
      return false;
    dp[0][0] = 1;  
    for (int j = 1; j < m; j++) {
        if (grid[0][j] == 0 && dp[0][j - 1] == 1)
            dp[0][j] = 1;
    }
    for (int i = 1; i < n; i++) {
        if (grid[i][0] == 0 && dp[i - 1][0] == 1)
            dp[i][0] = 1;
    }
    for (int i = 1; i < n; i++) {
        for (int j = 1; j < m; j++) {
            if (grid[i][j] == 0 && (dp[i - 1][j] == 1 || dp[i][j - 1] == 1))
                dp[i][j] = 1;
        }
    }
    return dp[n - 1][m - 1] == 1;
}
int main() {
    int n, m;
    cin >> n >> m;

    vector<vector<int>> grid(n, vector<int>(m));
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            cin >> grid[i][j];

    if (canReach(grid, n, m))
        cout << "true";
    else
        cout << "false";

    return 0;
}
