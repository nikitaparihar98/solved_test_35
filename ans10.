#include <iostream>
#include <vector>
using namespace std;

void dfs(int i, int j, vector<vector<int>>& grid, vector<vector<bool>>& visited, int n, int m) {
    if (i < 0 || j < 0 || i >= n || j >= m) return;
    if (grid[i][j] == 0 || visited[i][j]) return;
    visited[i][j] = true; 
    dfs(i + 1, j, grid, visited, n, m);
    dfs(i - 1, j, grid, visited, n, m);
    dfs(i, j + 1, grid, visited, n, m);
    dfs(i, j - 1, grid, visited, n, m);
}
int countPonds(vector<vector<int>>& grid, int n, int m) {
    vector<vector<bool>> visited(n, vector<bool>(m, false));
    int pondCount = 0;

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (grid[i][j] == 1 && !visited[i][j]) {
                pondCount++;
                dfs(i, j, grid, visited, n, m);
            }
        }
    }
    return pondCount;
}
int main() {
    int n, m;
    cin >> n >> m;
    vector<vector<int>> grid(n, vector<int>(m));
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            cin >> grid[i][j];

    cout << countPonds(grid, n, m);
    return 0;
}
